{
    "uid": "ABF7E648KE222A4121SBF4DE0A85BD9D5AFC",
    "isLoaded": true,
    "lastModificationTime": 1427147024612,
    "items": {
        "name": "ResourceLoader",
        "type": "game_script",
        "order": 1,
        "parentId": "2EC9F946K6417A4973S8308E368608E89B8B",
        "content": "# ===================================================================\n#\n#   Script: ResourceLoader\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass ResourceLoader\n    ###*\n    * The resource helps to load a bunch of resources from different kind of\n    * data structures.\n    *\n    * @module gs\n    * @class ResourceLoader\n    * @memberof gs\n    * @constructor\n    * @static\n    ###\n    constructor: ->\n        @loadedScenesByUid = {}\n        @loadedCommonEventsById = []\n\n    ###*\n    * Loads all graphics for the specified list of custom layout types/templates\n    *\n    * @method loadUiTypesGraphics\n    * @param {Object[]} types - An array of custom layout types/templates\n    * @static\n    ###\n    loadUiTypesGraphics: (types) ->\n        for k of types\n            @loadUiLayoutGraphics(types[k])\n\n        return null\n\n    ###*\n    * Loads all graphics for the specified layout-descriptor.\n    *\n    * @method loadUiGraphicsFromObject\n    * @param {Object} layout - The layout descriptor.\n    * @static\n    ###\n    loadUiGraphicsFromObject: (layout) ->\n        for k of layout\n            if k == \"image\" or k == \"fullImage\"\n                ResourceManager.getBitmap(\"Graphics/Pictures/#{layout[k]}\")\n            else if k == \"video\"\n                ResourceManager.getVideo(\"Movies/#{layout[k]}\")\n        return null\n\n    ###*\n    * Loads all graphics for the specified layout-descriptor.\n    *\n    * @method loadUiDataFieldsGraphics\n    * @param {Object} layout - The layout descriptor.\n    * @static\n    ###\n    loadUiDataFieldsGraphics: (layout) ->\n        for k of layout\n            if layout[k] instanceof Array\n                for o in layout[k]\n                    for j of o\n                        if j == \"image\" or j == \"fullImage\"\n                            image = o[j]\n\n                            if not image\n                                continue\n\n                            if image.startsWith(\"data:\")\n                                ResourceManager.getBitmap(o[j])\n                            else\n                                ResourceManager.getBitmap(\"Graphics/Pictures/#{o[j]}\")\n\n        return null\n\n    ###*\n    * Loads all graphics for the specified layout-descriptor.\n    *\n    * @method loadUiDataFieldsGraphics\n    * @param {Object} layout - The layout descriptor.\n    * @static\n    ###\n    loadUiLayoutGraphics: (layout) ->\n        if layout.preload?\n            if layout.preload.graphics?\n                for graphic in layout.preload.graphics\n                    if graphic.name?\n                        ResourceManager.getBitmap(\"#{ui.Component_FormulaHandler.fieldValue(null, graphic.folder)||'Graphics/Pictures'}/#{ui.Component_FormulaHandler.fieldValue(null, graphic.name)}\")\n                    else\n                        object = ui.Component_FormulaHandler.fieldValue(null, graphic.path)\n                        for sub in object\n                            if sub?\n                                image = ui.Component_FormulaHandler.fieldValue(sub, graphic.image)\n                                if image?.name?\n                                    ResourceManager.getBitmap(ResourceManager.getPath(image))\n                                else if image?\n                                    ResourceManager.getBitmap(\"Graphics/Pictures/#{image}\")\n            if layout.preload.videos?\n                for video in layout.preload.videos\n                    if video.name?\n                        ResourceManager.getVideo(\"#{video.folder||'Movies'}/#{video.name}\")\n            if layout.preload.music?\n                for music in layout.preload.music\n                    if music?\n                        musicFile = ui.Component_FormulaHandler.fieldValue(layout, music.name || music)\n                        if typeof(musicFile) == \"object\" then musicFile = musicFile.name\n                        if musicFile\n                            ResourceManager.getAudioBuffer(\"#{music.folder||'Audio/Music'}/#{musicFile}\")\n            if layout.preload.sounds?\n                for sound in layout.preload.sounds\n                    if sound?\n                        soundFile = ui.Component_FormulaHandler.fieldValue(layout, sound.name || sound)\n                        if typeof(soundFile) == \"object\" then soundFile = soundFile.name\n                        if soundFile\n                            ResourceManager.getAudioBuffer(\"#{sound.folder||'Audio/Sounds'}/#{soundFile}\")\n        if layout.images?\n            for image in layout.images\n                image = ui.Component_FormulaHandler.fieldValue(layout, image)\n                if image?.name\n                    ResourceManager.getBitmap(ResourceManager.getPath(image))\n                else\n                    ResourceManager.getBitmap(\"Graphics/Pictures/#{image}\")\n        if layout.animations?\n            for descriptor in layout.animations\n                for animation in descriptor.flow\n                    switch animation.type\n                        when \"sound\"\n                            ResourceManager.getAudioBuffer(ResourceManager.getPath(animation.sound))\n                        when \"changeImages\"\n                            for image in animation.images\n                                ResourceManager.getBitmap(\"Graphics/Pictures/#{image}\")\n                        when \"maskTo\"\n                            ResourceManager.getBitmap(ResourceManager.getPath(animation.mask))\n                    if animation.sound?\n                        ResourceManager.getAudioBuffer(ResourceManager.getPath(animation.sound))\n\n        if layout.image?\n            image = ui.Component_FormulaHandler.fieldValue(layout, layout.image)\n            \n            if image?.name\n                ResourceManager.getBitmap(ResourceManager.getPath(image))\n            else if layout.imageFolder?\n                imageFolder = ui.Component_FormulaHandler.fieldValue(layout, layout.imageFolder)\n                ResourceManager.getBitmap(\"#{imageFolder}/#{image}\")\n            else\n                ResourceManager.getBitmap(\"Graphics/Pictures/#{image}\")\n        if layout.video?\n            ResourceManager.getVideo(\"Movies/#{layout.video}\")\n        if layout.customFields?\n            @loadUiGraphicsFromObject(layout.customFields)\n        if layout.customFields?.actions?\n            for action in layout.customFields.actions\n                if action.name == \"playVoice\" or action.name == \"playSound\"\n                    AudioManager.loadSound(action.params.name)\n        if layout.actions? or layout.action?\n            actions = if layout.action? then [layout.action] else layout.actions\n            for action in actions\n                if action.name == \"playVoice\" or action.name == \"playSound\"\n                    AudioManager.loadSound(action.params.name)\n        if layout.params\n            @loadUiLayoutGraphics(layout.params)\n        if layout.template?\n            @loadUiLayoutGraphics(layout.template)\n        if layout.style? and ui.UiFactory.styles[layout.style]?\n            @loadUiLayoutGraphics(ui.UiFactory.styles[layout.style])\n            for sel of ui.UIManager.selectors\n                style = ui.UIManager.styles[layout.style + \":\"+sel]\n                if style then @loadUiLayoutGraphics(style)\n        if ui.UiFactory.customTypes[layout.type]?\n            @loadUiLayoutGraphics(ui.UiFactory.customTypes[layout.type])\n        if layout.controls?\n            for control in layout.controls\n                @loadUiLayoutGraphics(control)\n\n    ###*\n    * Loads all system sounds.\n    *\n    * @method loadSystemSounds\n    * @static\n    ###\n    loadSystemSounds: ->\n        for sound in RecordManager.system.sounds\n            AudioManager.loadSound(sound)\n\n    ###*\n    * Loads all system graphics.\n    *\n    * @method loadSystemGraphics\n    * @static\n    ###\n    loadSystemGraphics: ->\n        for slot in GameManager.saveGameSlots\n            if slot.thumb? and slot.thumb.length > 0\n                ResourceManager.getBitmap(slot.thumb)\n        if RecordManager.system.cursor?.name\n            ResourceManager.getBitmap(ResourceManager.getPath(RecordManager.system.cursor))\n        if RecordManager.system.titleScreen?.name\n            ResourceManager.getBitmap(ResourceManager.getPath(RecordManager.system.titleScreen))\n        if RecordManager.system.languageScreen?.name\n            ResourceManager.getBitmap(ResourceManager.getPath(RecordManager.system.languageScreen))\n        if RecordManager.system.menuBackground?.name\n            ResourceManager.getBitmap(ResourceManager.getPath(RecordManager.system.menuBackground))\n        return null\n\n    ###*\n    * Loads all resources needed by the specified list of commands.\n    *\n    * @method loadEventCommandsGraphics\n    * @param {Object[]} commands - The list of commands.\n    * @return {boolean} Indicates if data needs to be loaded.\n    * @static\n    ###\n    loadEventCommandsData: (commands) ->\n        @loadedScenesByUid = {}\n        return @_loadEventCommandsData(commands)\n\n    _loadEventCommandsData: (commands) ->\n        return no if not commands?\n\n        result = no\n\n        for command in commands\n            switch command.id\n                when \"vn.Choice\"\n                    if command.params.action.scene\n                        sceneDocument = DataManager.getDocument(command.params.action.scene.uid)\n                        if sceneDocument\n                            result = !sceneDocument.loaded if !result\n                            if sceneDocument.loaded and !@loadedScenesByUid[sceneDocument.uid]\n                                @loadedScenesByUid[sceneDocument.uid] = yes\n                                result = @_loadEventCommandsData(sceneDocument.items.commands) if !result\n\n                when \"vn.CallScene\"\n                    if command.params.scene\n                        sceneDocument = DataManager.getDocument(command.params.scene.uid)\n                        if sceneDocument\n                            result = !sceneDocument.loaded if !result\n                            if sceneDocument.loaded and !@loadedScenesByUid[sceneDocument.uid]\n                                @loadedScenesByUid[sceneDocument.uid] = yes\n                                result = @_loadEventCommandsData(sceneDocument.items.commands) if !result\n\n        return result\n\n    ###*\n    * Preloads all resources needed by the specified common event.\n    *\n    * @method loadCommonEventResources\n    * @param {string} eventId - ID of the common event to preload the resources for.\n    * @static\n    ###\n    loadCommonEventResources: (eventId) ->\n        commonEvent = RecordManager.commonEvents[eventId]\n        if commonEvent? and !@loadedCommonEventsById[eventId]\n            @loadedCommonEventsById[eventId] = true\n            @_loadEventCommandsGraphics(commonEvent.commands)\n\n    ###*\n    * Loads all resources needed by the specified list of commands.\n    *\n    * @method loadEventCommandsGraphics\n    * @param {Object[]} commands - The list of commands.\n    * @static\n    ###\n    loadEventCommandsGraphics: (commands) ->\n        @loadedScenesByUid = {}\n        @loadedCommonEventsById = []\n        @_loadEventCommandsGraphics(commands)\n\n    _loadEventCommandsGraphics: (commands) ->\n        return if not commands?\n\n        for command in commands\n            switch command.id\n                when \"gs.StartTimer\"\n                    if command.params.action.type == 1\n                        @loadCommonEventResources(command.params.action.data.commonEventId)\n                when \"gs.CallCommonEvent\"\n                    commonEvent = RecordManager.commonEvents[command.params.commonEventId]\n                    if commonEvent?\n                        for param, i in commonEvent.parameters\n                            if param.stringValueType == \"sceneId\" and command.params.parameters?.values[i]\n                                sceneDocument = DataManager.getDocument(command.params.parameters.values[i])\n                                if sceneDocument and !@loadedScenesByUid[sceneDocument.uid]\n                                    @loadedScenesByUid[sceneDocument.uid] = yes\n                                    @_loadEventCommandsGraphics(sceneDocument.items.commands)\n                        if !@loadedCommonEventsById[command.params.commonEventId]\n                            @loadedCommonEventsById[command.params.commonEventId] = true\n                            @_loadEventCommandsGraphics(commonEvent.commands)\n                when \"vn.CallScene\"\n                    sceneDocument = DataManager.getDocument(command.params.scene.uid)\n                    if sceneDocument and !@loadedScenesByUid[sceneDocument.uid]\n                        @loadedScenesByUid[sceneDocument.uid] = yes\n                        @_loadEventCommandsGraphics(sceneDocument.items.commands)\n                when \"gs.ChangeTransition\"\n                    ResourceManager.getBitmap(ResourceManager.getPath(command.params.graphic))\n                when \"gs.ScreenTransition\"\n                    ResourceManager.getBitmap(ResourceManager.getPath(command.params.graphic))\n                when \"vn.ChangeBackground\"\n                    if command.params.graphic?\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.graphic))\n                    if command.params.animation?.type == gs.AnimationTypes.MASKING and command.params.animation.mask?.graphic\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.animation.mask.graphic))\n                when \"vn.L2DJoinScene\"\n                    if command.params.model?\n                        ResourceManager.getLive2DModel(ResourceManager.getPath(command.params.model))\n                when \"vn.CharacterJoinScene\"\n                    character = RecordManager.characters[command.params.characterId]\n                    if character?\n                        expressionId = command.params.expressionId ? character.defaultExpressionId\n                        if expressionId?\n                            record = RecordManager.characterExpressions[expressionId]\n                            if record?\n                                if record.idle\n                                    for image in record.idle\n                                        ResourceManager.getBitmap(ResourceManager.getPath(image.resource))\n                                if record.talking\n                                    for image in record.talking\n                                        ResourceManager.getBitmap(ResourceManager.getPath(image.resource))\n\n                    if command.params.animation.type == gs.AnimationTypes.MASKING and command.params.animation.mask.graphic?\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.animation.mask.graphic))\n                when \"vn.CharacterChangeExpression\"\n                    record = RecordManager.characterExpressions[command.params.expressionId]\n                    if record?\n                        for image in record.idle\n                            ResourceManager.getBitmap(ResourceManager.getPath(image.resource))\n                        for image in record.talking\n                            ResourceManager.getBitmap(ResourceManager.getPath(image.resource))\n                    if command.params.animation.type == gs.AnimationTypes.MASKING and command.params.animation.mask.graphic?\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.animation.mask.graphic))\n                when \"gs.ShowPartialMessage\"\n                    if command.params.voice?\n                        AudioManager.loadSound(command.params.voice)\n                        #ResourceManager.getAudioBuffer(\"Audio/Sound/#{command.params.voice.name}\")\n\n                when \"vn.Choice\"\n                    if command.params.action.scene\n                        sceneDocument = DataManager.getDocument(command.params.action.scene.uid)\n                        if sceneDocument and !@loadedScenesByUid[sceneDocument.uid]\n                            @loadedScenesByUid[sceneDocument.uid] = yes\n                            @_loadEventCommandsGraphics(sceneDocument.items.commands)\n\n                    if command.params.action.commonEventId\n                        @loadCommonEventResources(command.params.action.commonEventId)\n\n\n                when \"gs.ShowMessage\", \"gs.ShowMessageNVL\", \"gs.ShowText\"\n                    if command.params.animations?\n                        for eid in command.params.animations\n                            animation = RecordManager.animations[eid]\n                            if animation? and animation.graphic.name\n                                ResourceManager.getBitmap(ResourceManager.getPath(animation.graphic))\n\n                    if command.params.expressions?\n                        for eid in command.params.expressions\n                            expression = RecordManager.characterExpressions[eid]\n                            if expression?\n                                if expression.idle then for image in expression.idle\n                                    ResourceManager.getBitmap(ResourceManager.getPath(image.resource))\n                                if expression.talking then for image in expression.talking\n                                    ResourceManager.getBitmap(ResourceManager.getPath(image.resource))\n\n\n                    if command.params.voice?\n                        AudioManager.loadSound(command.params.voice)\n                        #ResourceManager.getAudioBuffer(\"Audio/Sound/#{command.params.voice.name}\")\n                    record = RecordManager.characterExpressions[command.params.expressionId]\n                    if record?\n                        if record.idle then for image in record.idle\n                            ResourceManager.getBitmap(ResourceManager.getPath(image.resource))\n                        if record.talking then for image in record.talking\n                            ResourceManager.getBitmap(ResourceManager.getPath(image.resource))\n\n\n                when \"gs.AddHotspot\"\n                    if command.params.baseGraphic?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.baseGraphic))\n                    if command.params.hoverGraphic?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.hoverGraphic))\n                    if command.params.selectedGraphic?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.selectedGraphic))\n                    if command.params.selectedHoverGraphic?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.selectedHoverGraphic))\n                    if command.params.unselectedGraphic?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.unselectedGraphic))\n                    if command.params.actions?\n                        if command.params.actions.onClick.type == 1\n                            @loadCommonEventResources(command.params.actions.onClick.commonEventId)\n                        if command.params.actions.onEnter.type == 1\n                            @loadCommonEventResources(command.params.actions.onEnter.commonEventId)\n                        if command.params.actions.onLeave.type == 1\n                            @loadCommonEventResources(command.params.actions.onLeave.commonEventId)\n                        if command.params.actions.onSelect.type == 1\n                            @loadCommonEventResources(command.params.actions.onSelect.commonEventId)\n                        if command.params.actions.onDeselect.type == 1\n                            @loadCommonEventResources(command.params.actions.onDeselect.commonEventId)\n                        if command.params.actions.onDrag.type == 1\n                            @loadCommonEventResources(command.params.actions.onDrag.commonEventId)\n                        if command.params.actions.onDrop.type == 1\n                            @loadCommonEventResources(command.params.actions.onDrop.commonEventId)\n                        if command.params.actions.onDropReceive.type == 1\n                            @loadCommonEventResources(command.params.actions.onDropReceive.commonEventId)\n\n                when \"gs.ShowPicture\"\n                    if command.params.graphic?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.graphic))\n                    if command.params.animation?.type == gs.AnimationTypes.MASKING\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.animation.mask.graphic))\n                when \"gs.ShowImageMap\"\n                    if command.params.ground?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.ground))\n                    if command.params.hover?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.hover))\n                    if command.params.unselected?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.unselected))\n                    if command.params.selected?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.selected))\n                    if command.params.selectedHover?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.selectedHover))\n                    for hotspot in command.params.hotspots\n                        AudioManager.loadSound(hotspot.data.onHoverSound)\n                        AudioManager.loadSound(hotspot.data.onClickSound)\n                        if hotspot.data.action == 2 # Common Event\n                            commonEvent = RecordManager.commonEvents[hotspot.data.commonEventId]\n                            if commonEvent? and !@loadedCommonEventsById[hotspot.data.commonEventId]\n                                @loadedCommonEventsById[hotspot.data.commonEventId] = true\n                                @_loadEventCommandsGraphics(commonEvent.commands)\n                when \"gs.MovePicturePath\", \"vn.MoveCharacterPath\", \"vn.ScrollBackgroundPath\", \"gs.MoveVideoPath\"\n                    if command.params.path.effects?\n                        for effect in command.params.path.effects.data\n                            AudioManager.loadSound(effect.sound)\n\n                when \"gs.MaskPicture\", \"vn.MaskCharacter\", \"vn.MaskBackground\", \"gs.MaskVideo\"\n                    if command.params.mask.sourceType == 0 and command.params.mask.graphic?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.mask.graphic))\n                    if command.params.mask.sourceType == 1 and command.params.mask.video?.name\n                        ResourceManager.getVideo(ResourceManager.getPath(command.params.mask.video))\n                when \"gs.PlayPictureAnimation\"\n                    animationId = command.params.animationId\n                    if animationId? and not animationId.scope?\n                            animation = RecordManager.animations[animationId]\n                            if animation and animation.graphic?.name\n                                ResourceManager.getBitmap(ResourceManager.getPath(animation.graphic))\n\n                when \"gs.ShowBattleAnimation\"\n                    animationId = command.params.animationId\n                    if animationId? and not animationId.scope?\n                        animation = RecordManager.animations[animationId]\n                        @loadComplexAnimation(animation)\n\n                when \"gs.InputName\"\n                    actorId = command.params.actorId\n                    if actorId? and not actorId.scope?\n                        actor = RecordManager.actors[actorId]\n                        if actor?\n                            ResourceManager.getBitmap(\"Graphics/Faces/#{actor.faceGraphic?.name}\")\n\n                when \"gs.ChangeTileset\"\n                    if command.params.graphic?.name\n                        ResourceManager.getBitmap(\"Graphics/Tilesets/#{command.params.graphic.name}\")\n                when \"gs.ChangeMapParallaxBackground\"\n                    if command.params.parallaxBackground?.name\n                        ResourceManager.getBitmap(\"Graphics/Pictures/#{command.params.parallaxBackground.name}\")\n                when \"gs.ChangeActorGraphic\"\n                    if command.params.changeCharacter and command.params.characterGraphic?.name\n                        ResourceManager.getBitmap(\"Graphics/Characters/#{command.params.characterGraphic.name}\")\n                    if command.params.changeFace and command.params.faceGraphic?.name\n                        ResourceManager.getBitmap(\"Graphics/Faces/#{command.params.faceGraphic.name}\")\n                when \"gs.MoveEvent\"\n                    for moveCommand in command.params.commands\n                        switch moveCommand.id\n                            when 44 # Change Graphic\n                                ResourceManager.getBitmap(\"Graphics/Characters/#{moveCommand.resource.name}\")\n                            when 47 # Play Sound\n                                AudioManager.loadSound(moveCommand.resource)\n                when \"gs.TransformEnemy\"\n                    if not command.params?.targetId.scope? # FIXME: Maybe just use the current variable value?\n                        enemy = RecordManager.enemies[command.params.targetId]\n                        @loadActorBattleAnimations(enemy)\n\n                when \"gs.PlayMusic\"\n                    if command.params.music?\n                        AudioManager.loadMusic(command.params.music)\n                when \"gs.PlayVideo\", \"gs.ShowVideo\"\n                    if command.params.video?.name\n                        ResourceManager.getVideo(ResourceManager.getPath(command.params.video))\n                    if command.params.animation?.type == gs.AnimationTypes.MASKING\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.animation.mask.graphic))\n                when \"gs.PlaySound\"\n                    if command.params.sound?\n                        AudioManager.loadSound(command.params.sound)\n\n                when \"vn.ChangeSounds\"\n                    for sound in command.params.sounds\n                        if sound?\n                            AudioManager.loadSound(sound)\n\n                when \"gs.ChangeScreenCursor\"\n                    if command.params.graphic?.name\n                        ResourceManager.getBitmap(ResourceManager.getPath(command.params.graphic))\n        return null\n\n    ###*\n    * Loads all resources for the specified animation.\n    *\n    * @method loadAnimation\n    * @param {Object} animation - The animation-record.\n    * @static\n    ###\n    loadAnimation: (animation) ->\n        if animation? and animation.graphic?\n            ResourceManager.getBitmap(\"Graphics/SimpleAnimations/#{animation.graphic.name}\")\n\n\n\ngs.ResourceLoader = new ResourceLoader()\nwindow.ResourceLoader = gs.ResourceLoader",
        "compiledContent": "var ResourceLoader;\n\nResourceLoader = (function() {\n\n  /**\n  * The resource helps to load a bunch of resources from different kind of\n  * data structures.\n  *\n  * @module gs\n  * @class ResourceLoader\n  * @memberof gs\n  * @constructor\n  * @static\n   */\n  function ResourceLoader() {\n    this.loadedScenesByUid = {};\n    this.loadedCommonEventsById = [];\n  }\n\n\n  /**\n  * Loads all graphics for the specified list of custom layout types/templates\n  *\n  * @method loadUiTypesGraphics\n  * @param {Object[]} types - An array of custom layout types/templates\n  * @static\n   */\n\n  ResourceLoader.prototype.loadUiTypesGraphics = function(types) {\n    var k;\n    for (k in types) {\n      this.loadUiLayoutGraphics(types[k]);\n    }\n    return null;\n  };\n\n\n  /**\n  * Loads all graphics for the specified layout-descriptor.\n  *\n  * @method loadUiGraphicsFromObject\n  * @param {Object} layout - The layout descriptor.\n  * @static\n   */\n\n  ResourceLoader.prototype.loadUiGraphicsFromObject = function(layout) {\n    var k;\n    for (k in layout) {\n      if (k === \"image\" || k === \"fullImage\") {\n        ResourceManager.getBitmap(\"Graphics/Pictures/\" + layout[k]);\n      } else if (k === \"video\") {\n        ResourceManager.getVideo(\"Movies/\" + layout[k]);\n      }\n    }\n    return null;\n  };\n\n\n  /**\n  * Loads all graphics for the specified layout-descriptor.\n  *\n  * @method loadUiDataFieldsGraphics\n  * @param {Object} layout - The layout descriptor.\n  * @static\n   */\n\n  ResourceLoader.prototype.loadUiDataFieldsGraphics = function(layout) {\n    var image, j, k, l, len, o, ref;\n    for (k in layout) {\n      if (layout[k] instanceof Array) {\n        ref = layout[k];\n        for (l = 0, len = ref.length; l < len; l++) {\n          o = ref[l];\n          for (j in o) {\n            if (j === \"image\" || j === \"fullImage\") {\n              image = o[j];\n              if (!image) {\n                continue;\n              }\n              if (image.startsWith(\"data:\")) {\n                ResourceManager.getBitmap(o[j]);\n              } else {\n                ResourceManager.getBitmap(\"Graphics/Pictures/\" + o[j]);\n              }\n            }\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n\n  /**\n  * Loads all graphics for the specified layout-descriptor.\n  *\n  * @method loadUiDataFieldsGraphics\n  * @param {Object} layout - The layout descriptor.\n  * @static\n   */\n\n  ResourceLoader.prototype.loadUiLayoutGraphics = function(layout) {\n    var action, actions, animation, control, descriptor, graphic, image, imageFolder, l, len, len1, len10, len11, len2, len3, len4, len5, len6, len7, len8, len9, m, music, musicFile, n, object, p, q, r, ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, s, sel, sound, soundFile, style, sub, t, u, v, video, w, x;\n    if (layout.preload != null) {\n      if (layout.preload.graphics != null) {\n        ref = layout.preload.graphics;\n        for (l = 0, len = ref.length; l < len; l++) {\n          graphic = ref[l];\n          if (graphic.name != null) {\n            ResourceManager.getBitmap((ui.Component_FormulaHandler.fieldValue(null, graphic.folder) || 'Graphics/Pictures') + \"/\" + (ui.Component_FormulaHandler.fieldValue(null, graphic.name)));\n          } else {\n            object = ui.Component_FormulaHandler.fieldValue(null, graphic.path);\n            for (m = 0, len1 = object.length; m < len1; m++) {\n              sub = object[m];\n              if (sub != null) {\n                image = ui.Component_FormulaHandler.fieldValue(sub, graphic.image);\n                if ((image != null ? image.name : void 0) != null) {\n                  ResourceManager.getBitmap(ResourceManager.getPath(image));\n                } else if (image != null) {\n                  ResourceManager.getBitmap(\"Graphics/Pictures/\" + image);\n                }\n              }\n            }\n          }\n        }\n      }\n      if (layout.preload.videos != null) {\n        ref1 = layout.preload.videos;\n        for (n = 0, len2 = ref1.length; n < len2; n++) {\n          video = ref1[n];\n          if (video.name != null) {\n            ResourceManager.getVideo((video.folder || 'Movies') + \"/\" + video.name);\n          }\n        }\n      }\n      if (layout.preload.music != null) {\n        ref2 = layout.preload.music;\n        for (p = 0, len3 = ref2.length; p < len3; p++) {\n          music = ref2[p];\n          if (music != null) {\n            musicFile = ui.Component_FormulaHandler.fieldValue(layout, music.name || music);\n            if (typeof musicFile === \"object\") {\n              musicFile = musicFile.name;\n            }\n            if (musicFile) {\n              ResourceManager.getAudioBuffer((music.folder || 'Audio/Music') + \"/\" + musicFile);\n            }\n          }\n        }\n      }\n      if (layout.preload.sounds != null) {\n        ref3 = layout.preload.sounds;\n        for (q = 0, len4 = ref3.length; q < len4; q++) {\n          sound = ref3[q];\n          if (sound != null) {\n            soundFile = ui.Component_FormulaHandler.fieldValue(layout, sound.name || sound);\n            if (typeof soundFile === \"object\") {\n              soundFile = soundFile.name;\n            }\n            if (soundFile) {\n              ResourceManager.getAudioBuffer((sound.folder || 'Audio/Sounds') + \"/\" + soundFile);\n            }\n          }\n        }\n      }\n    }\n    if (layout.images != null) {\n      ref4 = layout.images;\n      for (r = 0, len5 = ref4.length; r < len5; r++) {\n        image = ref4[r];\n        image = ui.Component_FormulaHandler.fieldValue(layout, image);\n        if (image != null ? image.name : void 0) {\n          ResourceManager.getBitmap(ResourceManager.getPath(image));\n        } else {\n          ResourceManager.getBitmap(\"Graphics/Pictures/\" + image);\n        }\n      }\n    }\n    if (layout.animations != null) {\n      ref5 = layout.animations;\n      for (s = 0, len6 = ref5.length; s < len6; s++) {\n        descriptor = ref5[s];\n        ref6 = descriptor.flow;\n        for (t = 0, len7 = ref6.length; t < len7; t++) {\n          animation = ref6[t];\n          switch (animation.type) {\n            case \"sound\":\n              ResourceManager.getAudioBuffer(ResourceManager.getPath(animation.sound));\n              break;\n            case \"changeImages\":\n              ref7 = animation.images;\n              for (u = 0, len8 = ref7.length; u < len8; u++) {\n                image = ref7[u];\n                ResourceManager.getBitmap(\"Graphics/Pictures/\" + image);\n              }\n              break;\n            case \"maskTo\":\n              ResourceManager.getBitmap(ResourceManager.getPath(animation.mask));\n          }\n          if (animation.sound != null) {\n            ResourceManager.getAudioBuffer(ResourceManager.getPath(animation.sound));\n          }\n        }\n      }\n    }\n    if (layout.image != null) {\n      image = ui.Component_FormulaHandler.fieldValue(layout, layout.image);\n      if (image != null ? image.name : void 0) {\n        ResourceManager.getBitmap(ResourceManager.getPath(image));\n      } else if (layout.imageFolder != null) {\n        imageFolder = ui.Component_FormulaHandler.fieldValue(layout, layout.imageFolder);\n        ResourceManager.getBitmap(imageFolder + \"/\" + image);\n      } else {\n        ResourceManager.getBitmap(\"Graphics/Pictures/\" + image);\n      }\n    }\n    if (layout.video != null) {\n      ResourceManager.getVideo(\"Movies/\" + layout.video);\n    }\n    if (layout.customFields != null) {\n      this.loadUiGraphicsFromObject(layout.customFields);\n    }\n    if (((ref8 = layout.customFields) != null ? ref8.actions : void 0) != null) {\n      ref9 = layout.customFields.actions;\n      for (v = 0, len9 = ref9.length; v < len9; v++) {\n        action = ref9[v];\n        if (action.name === \"playVoice\" || action.name === \"playSound\") {\n          AudioManager.loadSound(action.params.name);\n        }\n      }\n    }\n    if ((layout.actions != null) || (layout.action != null)) {\n      actions = layout.action != null ? [layout.action] : layout.actions;\n      for (w = 0, len10 = actions.length; w < len10; w++) {\n        action = actions[w];\n        if (action.name === \"playVoice\" || action.name === \"playSound\") {\n          AudioManager.loadSound(action.params.name);\n        }\n      }\n    }\n    if (layout.params) {\n      this.loadUiLayoutGraphics(layout.params);\n    }\n    if (layout.template != null) {\n      this.loadUiLayoutGraphics(layout.template);\n    }\n    if ((layout.style != null) && (ui.UiFactory.styles[layout.style] != null)) {\n      this.loadUiLayoutGraphics(ui.UiFactory.styles[layout.style]);\n      for (sel in ui.UIManager.selectors) {\n        style = ui.UIManager.styles[layout.style + \":\" + sel];\n        if (style) {\n          this.loadUiLayoutGraphics(style);\n        }\n      }\n    }\n    if (ui.UiFactory.customTypes[layout.type] != null) {\n      this.loadUiLayoutGraphics(ui.UiFactory.customTypes[layout.type]);\n    }\n    if (layout.controls != null) {\n      ref10 = layout.controls;\n      results = [];\n      for (x = 0, len11 = ref10.length; x < len11; x++) {\n        control = ref10[x];\n        results.push(this.loadUiLayoutGraphics(control));\n      }\n      return results;\n    }\n  };\n\n\n  /**\n  * Loads all system sounds.\n  *\n  * @method loadSystemSounds\n  * @static\n   */\n\n  ResourceLoader.prototype.loadSystemSounds = function() {\n    var l, len, ref, results, sound;\n    ref = RecordManager.system.sounds;\n    results = [];\n    for (l = 0, len = ref.length; l < len; l++) {\n      sound = ref[l];\n      results.push(AudioManager.loadSound(sound));\n    }\n    return results;\n  };\n\n\n  /**\n  * Loads all system graphics.\n  *\n  * @method loadSystemGraphics\n  * @static\n   */\n\n  ResourceLoader.prototype.loadSystemGraphics = function() {\n    var l, len, ref, ref1, ref2, ref3, ref4, slot;\n    ref = GameManager.saveGameSlots;\n    for (l = 0, len = ref.length; l < len; l++) {\n      slot = ref[l];\n      if ((slot.thumb != null) && slot.thumb.length > 0) {\n        ResourceManager.getBitmap(slot.thumb);\n      }\n    }\n    if ((ref1 = RecordManager.system.cursor) != null ? ref1.name : void 0) {\n      ResourceManager.getBitmap(ResourceManager.getPath(RecordManager.system.cursor));\n    }\n    if ((ref2 = RecordManager.system.titleScreen) != null ? ref2.name : void 0) {\n      ResourceManager.getBitmap(ResourceManager.getPath(RecordManager.system.titleScreen));\n    }\n    if ((ref3 = RecordManager.system.languageScreen) != null ? ref3.name : void 0) {\n      ResourceManager.getBitmap(ResourceManager.getPath(RecordManager.system.languageScreen));\n    }\n    if ((ref4 = RecordManager.system.menuBackground) != null ? ref4.name : void 0) {\n      ResourceManager.getBitmap(ResourceManager.getPath(RecordManager.system.menuBackground));\n    }\n    return null;\n  };\n\n\n  /**\n  * Loads all resources needed by the specified list of commands.\n  *\n  * @method loadEventCommandsGraphics\n  * @param {Object[]} commands - The list of commands.\n  * @return {boolean} Indicates if data needs to be loaded.\n  * @static\n   */\n\n  ResourceLoader.prototype.loadEventCommandsData = function(commands) {\n    this.loadedScenesByUid = {};\n    return this._loadEventCommandsData(commands);\n  };\n\n  ResourceLoader.prototype._loadEventCommandsData = function(commands) {\n    var command, l, len, result, sceneDocument;\n    if (commands == null) {\n      return false;\n    }\n    result = false;\n    for (l = 0, len = commands.length; l < len; l++) {\n      command = commands[l];\n      switch (command.id) {\n        case \"vn.Choice\":\n          if (command.params.action.scene) {\n            sceneDocument = DataManager.getDocument(command.params.action.scene.uid);\n            if (sceneDocument) {\n              if (!result) {\n                result = !sceneDocument.loaded;\n              }\n              if (sceneDocument.loaded && !this.loadedScenesByUid[sceneDocument.uid]) {\n                this.loadedScenesByUid[sceneDocument.uid] = true;\n                if (!result) {\n                  result = this._loadEventCommandsData(sceneDocument.items.commands);\n                }\n              }\n            }\n          }\n          break;\n        case \"vn.CallScene\":\n          if (command.params.scene) {\n            sceneDocument = DataManager.getDocument(command.params.scene.uid);\n            if (sceneDocument) {\n              if (!result) {\n                result = !sceneDocument.loaded;\n              }\n              if (sceneDocument.loaded && !this.loadedScenesByUid[sceneDocument.uid]) {\n                this.loadedScenesByUid[sceneDocument.uid] = true;\n                if (!result) {\n                  result = this._loadEventCommandsData(sceneDocument.items.commands);\n                }\n              }\n            }\n          }\n      }\n    }\n    return result;\n  };\n\n\n  /**\n  * Preloads all resources needed by the specified common event.\n  *\n  * @method loadCommonEventResources\n  * @param {string} eventId - ID of the common event to preload the resources for.\n  * @static\n   */\n\n  ResourceLoader.prototype.loadCommonEventResources = function(eventId) {\n    var commonEvent;\n    commonEvent = RecordManager.commonEvents[eventId];\n    if ((commonEvent != null) && !this.loadedCommonEventsById[eventId]) {\n      this.loadedCommonEventsById[eventId] = true;\n      return this._loadEventCommandsGraphics(commonEvent.commands);\n    }\n  };\n\n\n  /**\n  * Loads all resources needed by the specified list of commands.\n  *\n  * @method loadEventCommandsGraphics\n  * @param {Object[]} commands - The list of commands.\n  * @static\n   */\n\n  ResourceLoader.prototype.loadEventCommandsGraphics = function(commands) {\n    this.loadedScenesByUid = {};\n    this.loadedCommonEventsById = [];\n    return this._loadEventCommandsGraphics(commands);\n  };\n\n  ResourceLoader.prototype._loadEventCommandsGraphics = function(commands) {\n    var actor, actorId, animation, animationId, character, command, commonEvent, effect, eid, enemy, expression, expressionId, hotspot, i, i1, image, j1, l, len, len1, len10, len11, len12, len13, len14, len15, len2, len3, len4, len5, len6, len7, len8, len9, m, moveCommand, n, p, param, q, r, record, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref31, ref32, ref33, ref34, ref35, ref36, ref37, ref38, ref39, ref4, ref40, ref41, ref42, ref5, ref6, ref7, ref8, ref9, s, sceneDocument, sound, t, u, v, w, x, y, z;\n    if (commands == null) {\n      return;\n    }\n    for (l = 0, len = commands.length; l < len; l++) {\n      command = commands[l];\n      switch (command.id) {\n        case \"gs.StartTimer\":\n          if (command.params.action.type === 1) {\n            this.loadCommonEventResources(command.params.action.data.commonEventId);\n          }\n          break;\n        case \"gs.CallCommonEvent\":\n          commonEvent = RecordManager.commonEvents[command.params.commonEventId];\n          if (commonEvent != null) {\n            ref = commonEvent.parameters;\n            for (i = m = 0, len1 = ref.length; m < len1; i = ++m) {\n              param = ref[i];\n              if (param.stringValueType === \"sceneId\" && ((ref1 = command.params.parameters) != null ? ref1.values[i] : void 0)) {\n                sceneDocument = DataManager.getDocument(command.params.parameters.values[i]);\n                if (sceneDocument && !this.loadedScenesByUid[sceneDocument.uid]) {\n                  this.loadedScenesByUid[sceneDocument.uid] = true;\n                  this._loadEventCommandsGraphics(sceneDocument.items.commands);\n                }\n              }\n            }\n            if (!this.loadedCommonEventsById[command.params.commonEventId]) {\n              this.loadedCommonEventsById[command.params.commonEventId] = true;\n              this._loadEventCommandsGraphics(commonEvent.commands);\n            }\n          }\n          break;\n        case \"vn.CallScene\":\n          sceneDocument = DataManager.getDocument(command.params.scene.uid);\n          if (sceneDocument && !this.loadedScenesByUid[sceneDocument.uid]) {\n            this.loadedScenesByUid[sceneDocument.uid] = true;\n            this._loadEventCommandsGraphics(sceneDocument.items.commands);\n          }\n          break;\n        case \"gs.ChangeTransition\":\n          ResourceManager.getBitmap(ResourceManager.getPath(command.params.graphic));\n          break;\n        case \"gs.ScreenTransition\":\n          ResourceManager.getBitmap(ResourceManager.getPath(command.params.graphic));\n          break;\n        case \"vn.ChangeBackground\":\n          if (command.params.graphic != null) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.graphic));\n          }\n          if (((ref2 = command.params.animation) != null ? ref2.type : void 0) === gs.AnimationTypes.MASKING && ((ref3 = command.params.animation.mask) != null ? ref3.graphic : void 0)) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.animation.mask.graphic));\n          }\n          break;\n        case \"vn.L2DJoinScene\":\n          if (command.params.model != null) {\n            ResourceManager.getLive2DModel(ResourceManager.getPath(command.params.model));\n          }\n          break;\n        case \"vn.CharacterJoinScene\":\n          character = RecordManager.characters[command.params.characterId];\n          if (character != null) {\n            expressionId = (ref4 = command.params.expressionId) != null ? ref4 : character.defaultExpressionId;\n            if (expressionId != null) {\n              record = RecordManager.characterExpressions[expressionId];\n              if (record != null) {\n                if (record.idle) {\n                  ref5 = record.idle;\n                  for (n = 0, len2 = ref5.length; n < len2; n++) {\n                    image = ref5[n];\n                    ResourceManager.getBitmap(ResourceManager.getPath(image.resource));\n                  }\n                }\n                if (record.talking) {\n                  ref6 = record.talking;\n                  for (p = 0, len3 = ref6.length; p < len3; p++) {\n                    image = ref6[p];\n                    ResourceManager.getBitmap(ResourceManager.getPath(image.resource));\n                  }\n                }\n              }\n            }\n          }\n          if (command.params.animation.type === gs.AnimationTypes.MASKING && (command.params.animation.mask.graphic != null)) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.animation.mask.graphic));\n          }\n          break;\n        case \"vn.CharacterChangeExpression\":\n          record = RecordManager.characterExpressions[command.params.expressionId];\n          if (record != null) {\n            ref7 = record.idle;\n            for (q = 0, len4 = ref7.length; q < len4; q++) {\n              image = ref7[q];\n              ResourceManager.getBitmap(ResourceManager.getPath(image.resource));\n            }\n            ref8 = record.talking;\n            for (r = 0, len5 = ref8.length; r < len5; r++) {\n              image = ref8[r];\n              ResourceManager.getBitmap(ResourceManager.getPath(image.resource));\n            }\n          }\n          if (command.params.animation.type === gs.AnimationTypes.MASKING && (command.params.animation.mask.graphic != null)) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.animation.mask.graphic));\n          }\n          break;\n        case \"gs.ShowPartialMessage\":\n          if (command.params.voice != null) {\n            AudioManager.loadSound(command.params.voice);\n          }\n          break;\n        case \"vn.Choice\":\n          if (command.params.action.scene) {\n            sceneDocument = DataManager.getDocument(command.params.action.scene.uid);\n            if (sceneDocument && !this.loadedScenesByUid[sceneDocument.uid]) {\n              this.loadedScenesByUid[sceneDocument.uid] = true;\n              this._loadEventCommandsGraphics(sceneDocument.items.commands);\n            }\n          }\n          if (command.params.action.commonEventId) {\n            this.loadCommonEventResources(command.params.action.commonEventId);\n          }\n          break;\n        case \"gs.ShowMessage\":\n        case \"gs.ShowMessageNVL\":\n        case \"gs.ShowText\":\n          if (command.params.animations != null) {\n            ref9 = command.params.animations;\n            for (s = 0, len6 = ref9.length; s < len6; s++) {\n              eid = ref9[s];\n              animation = RecordManager.animations[eid];\n              if ((animation != null) && animation.graphic.name) {\n                ResourceManager.getBitmap(ResourceManager.getPath(animation.graphic));\n              }\n            }\n          }\n          if (command.params.expressions != null) {\n            ref10 = command.params.expressions;\n            for (t = 0, len7 = ref10.length; t < len7; t++) {\n              eid = ref10[t];\n              expression = RecordManager.characterExpressions[eid];\n              if (expression != null) {\n                if (expression.idle) {\n                  ref11 = expression.idle;\n                  for (u = 0, len8 = ref11.length; u < len8; u++) {\n                    image = ref11[u];\n                    ResourceManager.getBitmap(ResourceManager.getPath(image.resource));\n                  }\n                }\n                if (expression.talking) {\n                  ref12 = expression.talking;\n                  for (v = 0, len9 = ref12.length; v < len9; v++) {\n                    image = ref12[v];\n                    ResourceManager.getBitmap(ResourceManager.getPath(image.resource));\n                  }\n                }\n              }\n            }\n          }\n          if (command.params.voice != null) {\n            AudioManager.loadSound(command.params.voice);\n          }\n          record = RecordManager.characterExpressions[command.params.expressionId];\n          if (record != null) {\n            if (record.idle) {\n              ref13 = record.idle;\n              for (w = 0, len10 = ref13.length; w < len10; w++) {\n                image = ref13[w];\n                ResourceManager.getBitmap(ResourceManager.getPath(image.resource));\n              }\n            }\n            if (record.talking) {\n              ref14 = record.talking;\n              for (x = 0, len11 = ref14.length; x < len11; x++) {\n                image = ref14[x];\n                ResourceManager.getBitmap(ResourceManager.getPath(image.resource));\n              }\n            }\n          }\n          break;\n        case \"gs.AddHotspot\":\n          if ((ref15 = command.params.baseGraphic) != null ? ref15.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.baseGraphic));\n          }\n          if ((ref16 = command.params.hoverGraphic) != null ? ref16.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.hoverGraphic));\n          }\n          if ((ref17 = command.params.selectedGraphic) != null ? ref17.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.selectedGraphic));\n          }\n          if ((ref18 = command.params.selectedHoverGraphic) != null ? ref18.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.selectedHoverGraphic));\n          }\n          if ((ref19 = command.params.unselectedGraphic) != null ? ref19.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.unselectedGraphic));\n          }\n          if (command.params.actions != null) {\n            if (command.params.actions.onClick.type === 1) {\n              this.loadCommonEventResources(command.params.actions.onClick.commonEventId);\n            }\n            if (command.params.actions.onEnter.type === 1) {\n              this.loadCommonEventResources(command.params.actions.onEnter.commonEventId);\n            }\n            if (command.params.actions.onLeave.type === 1) {\n              this.loadCommonEventResources(command.params.actions.onLeave.commonEventId);\n            }\n            if (command.params.actions.onSelect.type === 1) {\n              this.loadCommonEventResources(command.params.actions.onSelect.commonEventId);\n            }\n            if (command.params.actions.onDeselect.type === 1) {\n              this.loadCommonEventResources(command.params.actions.onDeselect.commonEventId);\n            }\n            if (command.params.actions.onDrag.type === 1) {\n              this.loadCommonEventResources(command.params.actions.onDrag.commonEventId);\n            }\n            if (command.params.actions.onDrop.type === 1) {\n              this.loadCommonEventResources(command.params.actions.onDrop.commonEventId);\n            }\n            if (command.params.actions.onDropReceive.type === 1) {\n              this.loadCommonEventResources(command.params.actions.onDropReceive.commonEventId);\n            }\n          }\n          break;\n        case \"gs.ShowPicture\":\n          if ((ref20 = command.params.graphic) != null ? ref20.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.graphic));\n          }\n          if (((ref21 = command.params.animation) != null ? ref21.type : void 0) === gs.AnimationTypes.MASKING) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.animation.mask.graphic));\n          }\n          break;\n        case \"gs.ShowImageMap\":\n          if ((ref22 = command.params.ground) != null ? ref22.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.ground));\n          }\n          if ((ref23 = command.params.hover) != null ? ref23.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.hover));\n          }\n          if ((ref24 = command.params.unselected) != null ? ref24.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.unselected));\n          }\n          if ((ref25 = command.params.selected) != null ? ref25.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.selected));\n          }\n          if ((ref26 = command.params.selectedHover) != null ? ref26.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.selectedHover));\n          }\n          ref27 = command.params.hotspots;\n          for (y = 0, len12 = ref27.length; y < len12; y++) {\n            hotspot = ref27[y];\n            AudioManager.loadSound(hotspot.data.onHoverSound);\n            AudioManager.loadSound(hotspot.data.onClickSound);\n            if (hotspot.data.action === 2) {\n              commonEvent = RecordManager.commonEvents[hotspot.data.commonEventId];\n              if ((commonEvent != null) && !this.loadedCommonEventsById[hotspot.data.commonEventId]) {\n                this.loadedCommonEventsById[hotspot.data.commonEventId] = true;\n                this._loadEventCommandsGraphics(commonEvent.commands);\n              }\n            }\n          }\n          break;\n        case \"gs.MovePicturePath\":\n        case \"vn.MoveCharacterPath\":\n        case \"vn.ScrollBackgroundPath\":\n        case \"gs.MoveVideoPath\":\n          if (command.params.path.effects != null) {\n            ref28 = command.params.path.effects.data;\n            for (z = 0, len13 = ref28.length; z < len13; z++) {\n              effect = ref28[z];\n              AudioManager.loadSound(effect.sound);\n            }\n          }\n          break;\n        case \"gs.MaskPicture\":\n        case \"vn.MaskCharacter\":\n        case \"vn.MaskBackground\":\n        case \"gs.MaskVideo\":\n          if (command.params.mask.sourceType === 0 && ((ref29 = command.params.mask.graphic) != null ? ref29.name : void 0)) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.mask.graphic));\n          }\n          if (command.params.mask.sourceType === 1 && ((ref30 = command.params.mask.video) != null ? ref30.name : void 0)) {\n            ResourceManager.getVideo(ResourceManager.getPath(command.params.mask.video));\n          }\n          break;\n        case \"gs.PlayPictureAnimation\":\n          animationId = command.params.animationId;\n          if ((animationId != null) && (animationId.scope == null)) {\n            animation = RecordManager.animations[animationId];\n            if (animation && ((ref31 = animation.graphic) != null ? ref31.name : void 0)) {\n              ResourceManager.getBitmap(ResourceManager.getPath(animation.graphic));\n            }\n          }\n          break;\n        case \"gs.ShowBattleAnimation\":\n          animationId = command.params.animationId;\n          if ((animationId != null) && (animationId.scope == null)) {\n            animation = RecordManager.animations[animationId];\n            this.loadComplexAnimation(animation);\n          }\n          break;\n        case \"gs.InputName\":\n          actorId = command.params.actorId;\n          if ((actorId != null) && (actorId.scope == null)) {\n            actor = RecordManager.actors[actorId];\n            if (actor != null) {\n              ResourceManager.getBitmap(\"Graphics/Faces/\" + ((ref32 = actor.faceGraphic) != null ? ref32.name : void 0));\n            }\n          }\n          break;\n        case \"gs.ChangeTileset\":\n          if ((ref33 = command.params.graphic) != null ? ref33.name : void 0) {\n            ResourceManager.getBitmap(\"Graphics/Tilesets/\" + command.params.graphic.name);\n          }\n          break;\n        case \"gs.ChangeMapParallaxBackground\":\n          if ((ref34 = command.params.parallaxBackground) != null ? ref34.name : void 0) {\n            ResourceManager.getBitmap(\"Graphics/Pictures/\" + command.params.parallaxBackground.name);\n          }\n          break;\n        case \"gs.ChangeActorGraphic\":\n          if (command.params.changeCharacter && ((ref35 = command.params.characterGraphic) != null ? ref35.name : void 0)) {\n            ResourceManager.getBitmap(\"Graphics/Characters/\" + command.params.characterGraphic.name);\n          }\n          if (command.params.changeFace && ((ref36 = command.params.faceGraphic) != null ? ref36.name : void 0)) {\n            ResourceManager.getBitmap(\"Graphics/Faces/\" + command.params.faceGraphic.name);\n          }\n          break;\n        case \"gs.MoveEvent\":\n          ref37 = command.params.commands;\n          for (i1 = 0, len14 = ref37.length; i1 < len14; i1++) {\n            moveCommand = ref37[i1];\n            switch (moveCommand.id) {\n              case 44:\n                ResourceManager.getBitmap(\"Graphics/Characters/\" + moveCommand.resource.name);\n                break;\n              case 47:\n                AudioManager.loadSound(moveCommand.resource);\n            }\n          }\n          break;\n        case \"gs.TransformEnemy\":\n          if (((ref38 = command.params) != null ? ref38.targetId.scope : void 0) == null) {\n            enemy = RecordManager.enemies[command.params.targetId];\n            this.loadActorBattleAnimations(enemy);\n          }\n          break;\n        case \"gs.PlayMusic\":\n          if (command.params.music != null) {\n            AudioManager.loadMusic(command.params.music);\n          }\n          break;\n        case \"gs.PlayVideo\":\n        case \"gs.ShowVideo\":\n          if ((ref39 = command.params.video) != null ? ref39.name : void 0) {\n            ResourceManager.getVideo(ResourceManager.getPath(command.params.video));\n          }\n          if (((ref40 = command.params.animation) != null ? ref40.type : void 0) === gs.AnimationTypes.MASKING) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.animation.mask.graphic));\n          }\n          break;\n        case \"gs.PlaySound\":\n          if (command.params.sound != null) {\n            AudioManager.loadSound(command.params.sound);\n          }\n          break;\n        case \"vn.ChangeSounds\":\n          ref41 = command.params.sounds;\n          for (j1 = 0, len15 = ref41.length; j1 < len15; j1++) {\n            sound = ref41[j1];\n            if (sound != null) {\n              AudioManager.loadSound(sound);\n            }\n          }\n          break;\n        case \"gs.ChangeScreenCursor\":\n          if ((ref42 = command.params.graphic) != null ? ref42.name : void 0) {\n            ResourceManager.getBitmap(ResourceManager.getPath(command.params.graphic));\n          }\n      }\n    }\n    return null;\n  };\n\n\n  /**\n  * Loads all resources for the specified animation.\n  *\n  * @method loadAnimation\n  * @param {Object} animation - The animation-record.\n  * @static\n   */\n\n  ResourceLoader.prototype.loadAnimation = function(animation) {\n    if ((animation != null) && (animation.graphic != null)) {\n      return ResourceManager.getBitmap(\"Graphics/SimpleAnimations/\" + animation.graphic.name);\n    }\n  };\n\n  return ResourceLoader;\n\n})();\n\ngs.ResourceLoader = new ResourceLoader();\n\nwindow.ResourceLoader = gs.ResourceLoader;\n\n//# sourceMappingURL=data:application/json;base64,\n//# sourceURL=ResourceLoader_23.js"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}