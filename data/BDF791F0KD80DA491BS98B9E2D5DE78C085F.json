{
    "uid": "BDF791F0KD80DA491BS98B9E2D5DE78C085F",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_Text",
        "type": "game_script",
        "order": 11,
        "parentId": "A05E7029K45DBA459BSADF4EEC07A526241A",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_Text\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_Text extends gs.Object_Visual\n    @objectCodecBlackList = [\"parent\"]\n    \n    ###*\n    * A game object used for custom texts in a scene.\n    *\n    * @module gs\n    * @class Object_Text\n    * @extends gs.Object_Visual\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super\n        \n        ###*\n        * The object's bitmap used for visual presentation.\n        * @property bitmap\n        * @type gs.Bitmap\n        ###\n        @bitmap = null\n        \n        ###*\n        * The font used for the text.\n        * @property font\n        * @type gs.Font\n        ###\n        @font = new Font(gs.Fonts.TEXT)\n        \n        ###*\n        * Indicates if word-wrap is enabled. If <b>true</b> line-breaks are automatically added.\n        * @property wordWrap\n        * @type boolean\n        ###\n        @wordWrap = no\n        \n        ###*\n        * The domain the object belongs to.\n        * @property domain\n        * @type string\n        ###\n        @domain = \"com.degica.vnm.default\"\n        \n        ###*\n        * The object's source rectangle. It controls which part of the object's image is used\n        * for visual presentation.\n        * @property srcRect\n        * @type gs.Rect\n        ###\n        @srcRect = new Rect()\n        \n        ###*\n        * The object's mask to execute masking-effects on it.\n        * @property mask\n        * @type gs.Mask\n        ###\n        @mask = new gs.Mask()\n        \n        ###*\n        * Indicates if the object's visual presentation should be mirrored horizontally.\n        * @property mirror\n        * @type boolean\n        ###\n        @mirror = false\n        \n        ###*\n        * The text to display.\n        * @property text\n        * @type string\n        ###\n        @text = \"\"\n        \n        ###*\n        * The rotation-angle of the picture in degrees. The rotation center depends on the\n        * anchor-point.\n        * @property angle\n        * @type number\n        ###\n        @angle = 0\n        \n        ###*\n        * The color tone of the object used for the visual presentation.\n        * @property tone\n        * @type gs.Tone\n        ###\n        @tone = new Tone(0, 0, 0, 0)\n        \n        ###*\n        * The color of the object used for the visual presentation.\n        * @property color\n        * @type gs.Color\n        ###\n        @color = new Color(255, 255, 255, 0)\n        \n        ###*\n        * The text-renderer used to render the text.\n        * @property textRenderer\n        * @type gs.Component_TextRenderer\n        ###\n        @textRenderer = new gs.Component_TextRenderer()\n        @textRenderer.object = this\n\n        ###*\n        * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n        * @property animator\n        * @type gs.Component_Animator\n        ###\n        @animator = new gs.Component_Animator()\n        \n        ###*\n        * The object's visual-component to display the game object on screen.\n        * @property visual\n        * @type gs.Component_Sprite\n        ###\n        @visual = new gs.Component_Sprite(no)\n        \n        ###*\n        * The object's behavior component for the text-specific behavior.\n        * @property behavior\n        * @type gs.Component_TextBehavior\n        ###\n        @behavior = new gs.Component_TextBehavior()\n\n        @addComponent(@visual)\n        @addComponent(@behavior)\n        @addComponent(@animator)\n        \n        @componentsFromDataBundle(data)\n        \n        #@update()\n     \n    ###*\n    * Restores the game object from a data-bundle.\n    *\n    * @method restore\n    * @param {Object} data - The data-bundle.\n    ###    \n    restore: (data) ->\n        super(data)\n        \n        @srcRect = gs.Rect.fromObject(data.srcRect)\n        @mask = gs.Mask.fromObject(data.mask)\n        \n    ###*\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n    ###    \n    toDataBundle: ->\n        components = @componentsToDataBundle(gs.Component_Animation)\n        \n        result = {\n            components: components,\n            dstRect: @dstRect,\n            srcRect: @srcRect,\n            opacity: @opacity,\n            origin: @origin,\n            offset: @offset,\n            anchor: @anchor,\n            zIndex: @zIndex,\n            mask: @mask.toDataBundle(),\n            motionBlur: @motionBlur,\n            zoom: @zoom,\n            angle: @angle,\n            mirror: @mirror,\n            text: @text,\n            formatting: @formatting\n        }\n\n        return result\n        \ngs.Object_Text = Object_Text",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_Text,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_Text = (function(superClass) {\n    extend(Object_Text, superClass);\n\n    Object_Text.objectCodecBlackList = [\"parent\"];\n\n\n    /**\n    * A game object used for custom texts in a scene.\n    *\n    * @module gs\n    * @class Object_Text\n    * @extends gs.Object_Visual\n    * @memberof gs\n    * @constructor\n     */\n\n    function Object_Text(data) {\n      Object_Text.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The object's bitmap used for visual presentation.\n      * @property bitmap\n      * @type gs.Bitmap\n       */\n      this.bitmap = null;\n\n      /**\n      * The font used for the text.\n      * @property font\n      * @type gs.Font\n       */\n      this.font = new Font(gs.Fonts.TEXT);\n\n      /**\n      * Indicates if word-wrap is enabled. If <b>true</b> line-breaks are automatically added.\n      * @property wordWrap\n      * @type boolean\n       */\n      this.wordWrap = false;\n\n      /**\n      * The domain the object belongs to.\n      * @property domain\n      * @type string\n       */\n      this.domain = \"com.degica.vnm.default\";\n\n      /**\n      * The object's source rectangle. It controls which part of the object's image is used\n      * for visual presentation.\n      * @property srcRect\n      * @type gs.Rect\n       */\n      this.srcRect = new Rect();\n\n      /**\n      * The object's mask to execute masking-effects on it.\n      * @property mask\n      * @type gs.Mask\n       */\n      this.mask = new gs.Mask();\n\n      /**\n      * Indicates if the object's visual presentation should be mirrored horizontally.\n      * @property mirror\n      * @type boolean\n       */\n      this.mirror = false;\n\n      /**\n      * The text to display.\n      * @property text\n      * @type string\n       */\n      this.text = \"\";\n\n      /**\n      * The rotation-angle of the picture in degrees. The rotation center depends on the\n      * anchor-point.\n      * @property angle\n      * @type number\n       */\n      this.angle = 0;\n\n      /**\n      * The color tone of the object used for the visual presentation.\n      * @property tone\n      * @type gs.Tone\n       */\n      this.tone = new Tone(0, 0, 0, 0);\n\n      /**\n      * The color of the object used for the visual presentation.\n      * @property color\n      * @type gs.Color\n       */\n      this.color = new Color(255, 255, 255, 0);\n\n      /**\n      * The text-renderer used to render the text.\n      * @property textRenderer\n      * @type gs.Component_TextRenderer\n       */\n      this.textRenderer = new gs.Component_TextRenderer();\n      this.textRenderer.object = this;\n\n      /**\n      * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n      * @property animator\n      * @type gs.Component_Animator\n       */\n      this.animator = new gs.Component_Animator();\n\n      /**\n      * The object's visual-component to display the game object on screen.\n      * @property visual\n      * @type gs.Component_Sprite\n       */\n      this.visual = new gs.Component_Sprite(false);\n\n      /**\n      * The object's behavior component for the text-specific behavior.\n      * @property behavior\n      * @type gs.Component_TextBehavior\n       */\n      this.behavior = new gs.Component_TextBehavior();\n      this.addComponent(this.visual);\n      this.addComponent(this.behavior);\n      this.addComponent(this.animator);\n      this.componentsFromDataBundle(data);\n    }\n\n\n    /**\n    * Restores the game object from a data-bundle.\n    *\n    * @method restore\n    * @param {Object} data - The data-bundle.\n     */\n\n    Object_Text.prototype.restore = function(data) {\n      Object_Text.__super__.restore.call(this, data);\n      this.srcRect = gs.Rect.fromObject(data.srcRect);\n      return this.mask = gs.Mask.fromObject(data.mask);\n    };\n\n\n    /**\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n     */\n\n    Object_Text.prototype.toDataBundle = function() {\n      var components, result;\n      components = this.componentsToDataBundle(gs.Component_Animation);\n      result = {\n        components: components,\n        dstRect: this.dstRect,\n        srcRect: this.srcRect,\n        opacity: this.opacity,\n        origin: this.origin,\n        offset: this.offset,\n        anchor: this.anchor,\n        zIndex: this.zIndex,\n        mask: this.mask.toDataBundle(),\n        motionBlur: this.motionBlur,\n        zoom: this.zoom,\n        angle: this.angle,\n        mirror: this.mirror,\n        text: this.text,\n        formatting: this.formatting\n      };\n      return result;\n    };\n\n    return Object_Text;\n\n  })(gs.Object_Visual);\n\n  gs.Object_Text = Object_Text;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}