{
    "uid": "4E6166C5K0D27A44E3SB533EBD2F28EAC813",
    "isLoaded": true,
    "lastModificationTime": 1422539303048,
    "items": {
        "name": "SceneManager",
        "type": "game_script",
        "order": 2,
        "parentId": "C0268943K60B3A42B7SA6F1EDDCF2F642FD7",
        "content": "# ===================================================================\n#\n#   Script: SceneManager\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass SceneManager extends gs.ObjectManager\n    ###*\n    * Manages the scenes of the game.\n    *\n    * @module gs\n    * @class SceneManager\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: ->\n        super\n        \n        ###*\n        * The current scene.\n        * @property scene\n        * @type gs.Object_Base\n        ### \n        @scene = null\n        \n        ###*\n        * An array of previous scenes. Used to jump back to last scene from a menu for example.\n        * @property previousScenes\n        * @type gs.Object_Base\n        ### \n        @previousScenes = []\n        \n        ###*\n        * The next scene. If set, this scene will become the current scene after next update.\n        * @property nextScene\n        * @type gs.Object_Base\n        ### \n        @nextScene = null\n        \n        ###*\n        * The transition-data like the graphic, vague, etc. used for a transition from one scene to another.\n        * @property transitionData\n        * @type Object\n        ### \n        @transitionData = { graphic: null, duration: 20, vague: 30 }\n        \n        @input = yes\n        ###*\n        * Called if a scene-change has been done.\n        * @property callback\n        * @type Function\n        ### \n        @callback = null\n        \n        @paused = no\n        \n    \n    initialize: ->\n            \n    ###*\n    * Switches from the current scene to the specified one.\n    *\n    * @method switchTo\n    * @param {gs.Object_Base} scene - The new scene.\n    * @param {boolean} savePrevious - Indicates if the current scene should be pushed to previous-scene stack instead\n    * of getting disposed. It is possible to switch back to that scene then using gs.SceneManager.returnToPrevious method.\n    * @param {Function} callback - Called after the scene has been changed.\n    ###\n    switchTo: (scene, savePrevious, callback) ->\n        @callback = callback\n        if savePrevious\n            @previousScenes.push(@scene)\n        else if @previousScenes.length == 0\n            gs.Audio.reset()\n    \n        if @scene?\n            @removeObject(@scene)\n            \n        @nextScene = scene\n        \n        Graphics.freeze()\n    \n    ###*\n    * Clears the stack of previous-scenes and disposes all previous-scenes. After that it is not\n    * possible to go back to a previous scene using gs.SceneManager.returnToPrevious().\n    *\n    * @method clear\n    ###    \n    clear: ->\n        for scene in @previousScenes\n          scene.dispose()\n        @previousScenes = []\n     \n    ###*\n    * Returns to the previous scene if that scene was saved before.\n    *\n    * @method returnToPrevious\n    * @param {Function} callback - Called after the scene has been changed.\n    ###    \n    returnToPrevious: (callback) ->\n        @callback = callback\n        if @previousScenes.length > 0\n            scene = @previousScenes.pop()\n            \n            if @scene?\n                @removeObject(@scene)\n                \n            if scene?\n                @nextScene = scene\n                \n                Graphics.freeze()\n     \n    ###*\n    * Updates the current scene and the scene-handling. Needs to be called once\n    * per frame.\n    *\n    * @method update\n    ###   \n    update: ->\n        if @nextScene != @scene\n            Input.clear()\n            \n            if @scene?\n                if @previousScenes.indexOf(@scene) == -1\n                    @scene.dispose()\n                else\n                    @scene.behavior.show(no)\n                    #@scene.update()\n            \n            @scene = @nextScene\n            @callback?()\n   \n            if @scene\n                @addObject(@scene)\n                @scene.loading = true\n                @scene.loadingData = true\n                @scene.loadingResources = true\n        \n                if @scene? and not @scene.initialized\n                    @scene.behavior.initialize()\n                    @scene.behavior.prepareLoadingScreen()\n                    @isFadeOut = yes\n                else if @scene?.initialized\n                    @scene.behavior.show(yes)\n                    @scene.update()\n                Graphics.update()\n                @scene.behavior.transition()\n            else\n                Graphics.freeze()\n                Graphics.update()\n                Graphics.transition(30)\n            \n                @isFadeOut = yes\n            \n        if @isFadeOut and Graphics.frozen\n            Graphics.update()\n            Input.update()\n        else\n            if @isFadeOut\n                AudioManager.stopAllSounds()\n                @isFadeOut = no\n                if @scene\n                    Graphics.freeze()\n                else\n                    gs.Application.exit()\n                    \n            DataManager.update()\n            ResourceManager.update()\n            \n            if RecordManager.initialized\n                AudioManager.update()\n                \n            if Graphics.frozen\n                Input.update()\n                \n            super()\n         \n            \n\nwindow.SceneManager = new SceneManager()\ngs.SceneManager = window.SceneManager",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var SceneManager,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  SceneManager = (function(superClass) {\n    extend(SceneManager, superClass);\n\n\n    /**\n    * Manages the scenes of the game.\n    *\n    * @module gs\n    * @class SceneManager\n    * @memberof gs\n    * @constructor\n     */\n\n    function SceneManager() {\n      SceneManager.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The current scene.\n      * @property scene\n      * @type gs.Object_Base\n       */\n      this.scene = null;\n\n      /**\n      * An array of previous scenes. Used to jump back to last scene from a menu for example.\n      * @property previousScenes\n      * @type gs.Object_Base\n       */\n      this.previousScenes = [];\n\n      /**\n      * The next scene. If set, this scene will become the current scene after next update.\n      * @property nextScene\n      * @type gs.Object_Base\n       */\n      this.nextScene = null;\n\n      /**\n      * The transition-data like the graphic, vague, etc. used for a transition from one scene to another.\n      * @property transitionData\n      * @type Object\n       */\n      this.transitionData = {\n        graphic: null,\n        duration: 20,\n        vague: 30\n      };\n      this.input = true;\n\n      /**\n      * Called if a scene-change has been done.\n      * @property callback\n      * @type Function\n       */\n      this.callback = null;\n      this.paused = false;\n    }\n\n    SceneManager.prototype.initialize = function() {};\n\n\n    /**\n    * Switches from the current scene to the specified one.\n    *\n    * @method switchTo\n    * @param {gs.Object_Base} scene - The new scene.\n    * @param {boolean} savePrevious - Indicates if the current scene should be pushed to previous-scene stack instead\n    * of getting disposed. It is possible to switch back to that scene then using gs.SceneManager.returnToPrevious method.\n    * @param {Function} callback - Called after the scene has been changed.\n     */\n\n    SceneManager.prototype.switchTo = function(scene, savePrevious, callback) {\n      this.callback = callback;\n      if (savePrevious) {\n        this.previousScenes.push(this.scene);\n      } else if (this.previousScenes.length === 0) {\n        gs.Audio.reset();\n      }\n      if (this.scene != null) {\n        this.removeObject(this.scene);\n      }\n      this.nextScene = scene;\n      return Graphics.freeze();\n    };\n\n\n    /**\n    * Clears the stack of previous-scenes and disposes all previous-scenes. After that it is not\n    * possible to go back to a previous scene using gs.SceneManager.returnToPrevious().\n    *\n    * @method clear\n     */\n\n    SceneManager.prototype.clear = function() {\n      var i, len, ref, scene;\n      ref = this.previousScenes;\n      for (i = 0, len = ref.length; i < len; i++) {\n        scene = ref[i];\n        scene.dispose();\n      }\n      return this.previousScenes = [];\n    };\n\n\n    /**\n    * Returns to the previous scene if that scene was saved before.\n    *\n    * @method returnToPrevious\n    * @param {Function} callback - Called after the scene has been changed.\n     */\n\n    SceneManager.prototype.returnToPrevious = function(callback) {\n      var scene;\n      this.callback = callback;\n      if (this.previousScenes.length > 0) {\n        scene = this.previousScenes.pop();\n        if (this.scene != null) {\n          this.removeObject(this.scene);\n        }\n        if (scene != null) {\n          this.nextScene = scene;\n          return Graphics.freeze();\n        }\n      }\n    };\n\n\n    /**\n    * Updates the current scene and the scene-handling. Needs to be called once\n    * per frame.\n    *\n    * @method update\n     */\n\n    SceneManager.prototype.update = function() {\n      var ref;\n      if (this.nextScene !== this.scene) {\n        Input.clear();\n        if (this.scene != null) {\n          if (this.previousScenes.indexOf(this.scene) === -1) {\n            this.scene.dispose();\n          } else {\n            this.scene.behavior.show(false);\n          }\n        }\n        this.scene = this.nextScene;\n        if (typeof this.callback === \"function\") {\n          this.callback();\n        }\n        if (this.scene) {\n          this.addObject(this.scene);\n          this.scene.loading = true;\n          this.scene.loadingData = true;\n          this.scene.loadingResources = true;\n          if ((this.scene != null) && !this.scene.initialized) {\n            this.scene.behavior.initialize();\n            this.scene.behavior.prepareLoadingScreen();\n            this.isFadeOut = true;\n          } else if ((ref = this.scene) != null ? ref.initialized : void 0) {\n            this.scene.behavior.show(true);\n            this.scene.update();\n          }\n          Graphics.update();\n          this.scene.behavior.transition();\n        } else {\n          Graphics.freeze();\n          Graphics.update();\n          Graphics.transition(30);\n          this.isFadeOut = true;\n        }\n      }\n      if (this.isFadeOut && Graphics.frozen) {\n        Graphics.update();\n        return Input.update();\n      } else {\n        if (this.isFadeOut) {\n          AudioManager.stopAllSounds();\n          this.isFadeOut = false;\n          if (this.scene) {\n            Graphics.freeze();\n          } else {\n            gs.Application.exit();\n          }\n        }\n        DataManager.update();\n        ResourceManager.update();\n        if (RecordManager.initialized) {\n          AudioManager.update();\n        }\n        if (Graphics.frozen) {\n          Input.update();\n        }\n        return SceneManager.__super__.update.call(this);\n      }\n    };\n\n    return SceneManager;\n\n  })(gs.ObjectManager);\n\n  window.SceneManager = new SceneManager();\n\n  gs.SceneManager = window.SceneManager;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}