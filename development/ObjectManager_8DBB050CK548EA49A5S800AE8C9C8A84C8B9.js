// Generated by CoffeeScript 1.12.7
(function() {
  var ObjectManager;

  ObjectManager = (function() {

    /**
    * Stores the current default ObjectManager.
    * @property current
    * @type gs.ObjectManager
    * @static
     */
    ObjectManager.current = null;


    /**
    * Manages game objects by updating if necessary and offering
    * methods to add or remove game objects. All game objects are sorted by
    * the order-property to give control over the update-order.
    *
    * A game object can registered under a unique ID and then easily accessed using
    * that ID. If an object gets registered, a global variable $<ID> is created
    * as well. However, that global variable is only for the use in property-bindings
    * used for In-Game UI. See ui.Component_BindingHandler.
    *
    * In addition, a game object can be assigned to a group like for example
    * a set of UI toggle-buttons can be assigned to the same group and then
    * easily accessed later using gs.ObjectManager.objectsByGroup method.
    *
    * @module gs
    * @class ObjectManager
    * @memberof gs
    * @constructor
    * @see ui.Component_BindingHandler
     */

    function ObjectManager() {

      /**
      * All game objects to manage.
      * @property objects
      * @type gs.Object_Base[]
       */
      this.objects = [];

      /**
      * All game objects by ID.
      * @property objectsById
      * @type Object
       */
      this.objectsById = {};

      /**
      * All game objects by group.
      * @property objectsByGroup_
      * @type Object
       */
      this.objectsByGroup_ = {};

      /**
      * Indicates if the ObjectManager is active. If <b>false</b> the game objects are not updated.
      * @property active
      * @type boolean
       */
      this.active = true;

      /**
      * Indicates if the ObjectManager needs to sort the game objects.
      * @property active
      * @type boolean
       */
      this.needsSort = true;
    }


    /**
    * Disposes the manager and all assigned game objects.
    *
    * @method dispose
     */

    ObjectManager.prototype.dispose = function() {
      var j, len, object, ref, results;
      ref = this.objects;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        object = ref[j];
        if (!object.disposed) {
          results.push(object.dispose());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };


    /**
    * Disposes all assigned game objects.
    *
    * @method disposeObjects
     */

    ObjectManager.prototype.disposeObjects = function() {
      var j, k, keys, len, object, results;
      keys = Object.keys(this.objectsById);
      results = [];
      for (j = 0, len = keys.length; j < len; j++) {
        k = keys[j];
        object = this.objectsById[k];
        if (object && !object.disposed) {
          results.push(object.dispose());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };


    /**
    * Registers an object.
    *
    * @method registerObject
     */

    ObjectManager.prototype.registerObject = function(object) {
      if (object.id != null) {
        if (!this.objectsById[object.id]) {
          this.objectsById[object.id] = [];
        }
        this.objectsById[object.id].push(object);
        return window["$" + object.id] = object;
      }
    };


    /**
    * Unregisters an object.
    *
    * @method unregisterObject
     */

    ObjectManager.prototype.unregisterObject = function(object) {
      var objects;
      if ((object != null ? object.id : void 0) != null) {
        objects = this.objectsById[object.id];
        if (objects) {
          objects.remove(object);
          if (objects.length > 0) {
            window["$" + object.id] = objects.last();
          } else {
            delete window["$" + object.id];
          }
        }
      }
      return null;
    };


    /**
    * Adds a game object to the manager. The game object is then automatically updated by the manager.
    *
    * @method addObject
    * @param {gs.Object_Base} object - The game object to add.
     */

    ObjectManager.prototype.addObject = function(object) {
      return this.add(object);
    };


    /**
    * Removes a game object to the manager. The game object is then no longer automatically updated or disposed by the manager.
    *
    * @method removeObject
    * @param {gs.Object_Base} object - The game object to remove.
     */

    ObjectManager.prototype.removeObject = function(object) {
      return this.remove(object);
    };


    /**
    * Adds a game object to the manager. The game object is then automatically updated by the manager.
    *
    * @method add
    * @param {gs.Object_Base} object - The game object to add.
     */

    ObjectManager.prototype.add = function(object) {
      this.objects.push(object);
      this.needsSort = true;
      this.registerObject(object);
      return this.addToGroup(object, object.group);
    };


    /**
    * Removes a game object to the manager. The game object is then no longer automatically updated or disposed by the manager.
    *
    * @method remove
    * @param {gs.Object_Base} object - The game object to remove.
     */

    ObjectManager.prototype.remove = function(object) {
      var ref;
      if (object) {
        this.objects.remove(object);
        this.unregisterObject(object);
        if (object.group != null) {
          return (ref = this.objectsByGroup[object.group]) != null ? ref.remove(object) : void 0;
        }
      }
    };


    /**
    * Gets an object by ID.
    *
    * @method objectById
    * @param {String} id - The ID of the game object to get. 
    * @return {gs.Object_Base} The game object or <b>null</b> if no game object is registered for the specified ID.
     */

    ObjectManager.prototype.objectById = function(id) {
      var ref;
      return (ref = this.objectsById[id]) != null ? ref.last() : void 0;
    };


    /**
    * Gets an object by ID.
    *
    * @method byId
    * @param {String} id - The ID of the game object to get. 
    * @return {gs.Object_Base} The game object or <b>null</b> if no game object is registered for the specified ID.
     */

    ObjectManager.prototype.byId = function(id) {
      var ref;
      return (ref = this.objectsById[id]) != null ? ref.last() : void 0;
    };


    /**
    * Sets the object for an ID.
    *
    * @method setObjectById
    * @param {gs.Object_Base} object - The game object to set.
    * @param {String} id - The ID for the game object.
     */

    ObjectManager.prototype.setObjectById = function(object, id) {
      if (!id) {
        return;
      }
      object.id = id;
      if (!this.objectsById[id]) {
        this.objectsById[id] = [object];
      } else {
        this.objectsById[id].push(object);
      }
      return window["$" + id] = object;
    };


    /**
    * Adds an object to a specified object-group.
    *
    * @method addToGroup
    * @param {gs.Object_Base} object - The game object to add.
    * @param {String} group - The group to assign game object to.
     */

    ObjectManager.prototype.addToGroup = function(object, group) {
      var ref;
      if (group != null) {
        if ((ref = this.objectsByGroup_[object.group]) != null) {
          ref.remove(object);
        }
        if (!this.objectsByGroup_[group]) {
          this.objectsByGroup_[group] = [];
        }
        return this.objectsByGroup_[group].push(object);
      }
    };


    /**
    * Gets all object of a specified object-group.
    *
    * @method objectsByGroup
    * @param {String} group - The object-group.
    * @return {gs.Object_Base[]} The game objects belonging to the specified group.
     */

    ObjectManager.prototype.objectsByGroup = function(group) {
      return this.objectsByGroup_[group] || [];
    };


    /**
    * Updates the manager and all assigned game objects in the right order.
    *
    * @method update
     */

    ObjectManager.prototype.update = function() {
      var i, object;
      i = 0;
      if (this.needsSort) {
        this.objects.sort(function(a, b) {
          if (a.order < b.order) {
            return 1;
          } else if (a.order > b.order) {
            return -1;
          } else {
            return 0;
          }
        });
        this.needsSort = false;
      }
      while (i < this.objects.length) {
        object = this.objects[i];
        if (object.disposed) {
          this.removeObject(object);
        } else {
          if (object.active) {
            object.update();
          }
          i++;
        }
      }
      return null;
    };

    return ObjectManager;

  })();

  gs.ObjectManager = ObjectManager;

}).call(this);
